@function valid-radius($radius) {
    $return: ();
    @each $value in $radius {
        @if type-of($value) == number {
            $return: append($return, max($value, 0));
        } @else {
            $return: append($return, $value);
        }
    }
    @return $return;
}

@mixin make-border-hover-colors($bg-colors: $border-bg-colors-hover) {
    @each $key, $value in $bg-colors {
        .border-hover-#{$key}:hover {
            border-color: $value !important;
        }
    }
}

@mixin make-border-active-colors($bg-colors: $border-bg-colors) {
    @each $key, $value in $bg-colors {
        .border-active-#{$key}.active {
            border-color: $value !important;
        }
    }
}

@mixin make-border-dashed() {
    .border-dashed {
        border-style: dashed !important;
        border-color: var(--#{$prefix}border-dashed-color);
    }
}

@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
    @if $enable-rounded {
        border-radius: valid-radius($radius);
    } @else if $fallback-border-radius != false {
        border-radius: $fallback-border-radius;
    }
}

@mixin box-shadow($shadow...) {
    @if $enable-shadows {
        $result: ();

        @each $value in $shadow {
            @if $value != null {
                $result: append($result, $value, "comma");
            }
            @if $value == none and length($shadow) > 1 {
                @warn "The keyword 'none' must be used as a single argument.";
            }
        }

        @if (length($result) > 0) {
            box-shadow: $result;
        }
    }
}

@mixin border-top-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-left-radius: valid-radius($radius);
        border-top-right-radius: valid-radius($radius);
    }
}

@mixin border-bottom-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-bottom-right-radius: valid-radius($radius);
        border-bottom-left-radius: valid-radius($radius);
    }
}

@mixin border-end-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-right-radius: valid-radius($radius);
        border-bottom-right-radius: valid-radius($radius);
    }
}

@mixin border-start-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-left-radius: valid-radius($radius);
        border-bottom-left-radius: valid-radius($radius);
    }
}

@mixin border-top-end-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-right-radius: valid-radius($radius);
    }
}

@mixin border-bottom-start-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-bottom-left-radius: valid-radius($radius);
    }
}
