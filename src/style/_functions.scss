@use "sass:math";
@use "sass:map";

@function tint-color($colors, $weight) {
    @return mix(white, $colors, $weight);
}

@function shade-color($colors, $weight) {
    @return mix(black, $colors, $weight);
}

@function shift-color($color, $weight) {
    @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@function subtract($value1, $value2, $return-calc: true) {
    @if $value1 == null and $value2 == null {
        @return null;
    }

    @if $value1 == null {
        @return -$value2;
    }

    @if $value2 == null {
        @return $value1;
    }

    @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
        @return $value1 - $value2;
    }

    @if type-of($value2) != number {
        $value2: unquote("(") + $value2 + unquote(")");
    }

    @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}

@function escape-svg($string) {
    @if str-index($string, "data:image/svg+xml") {
        @each $char, $encoded in $escaped-characters {
            // Do not escape the url brackets
            @if str-index($string, "url(") == 1 {
                $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
            } @else {
                $string: str-replace($string, $char, $encoded);
            }
        }
    }
    @return $string;
}

@function svg-url-with-replaced-fill($svg, $fill-to-replace, $new-fill) {
    @if str-index($svg, "data:image/svg+xml") {
        $svg: str-replace($svg, $fill-to-replace, $new-fill);
        $svg: escape-svg($svg);
    }
    @return $svg;
}

// Return valid calc
@function add($value1, $value2, $return-calc: true) {
    @if $value1 == null {
        @return $value2;
    }

    @if $value2 == null {
        @return $value1;
    }

    @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
        @return $value1 + $value2;
    }

    @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);
}

// Colors
@function to-rgb($value) {
    @return red($value), green($value), blue($value);
}

@function isValue($value) {
    @return $value != "default";
}

@function rgba-css-var($identifier, $target) {
    @if $identifier == "body" and $target == "bg" {
        @return rgba(var(--#{$prefix}#{$identifier}-bg-rgb), var(--#{$prefix}#{$target}-opacity));
    }
    @if $identifier == "body" and $target == "text" {
        @return rgba(var(--#{$prefix}#{$identifier}-color-rgb), var(--#{$prefix}#{$target}-opacity));
    } @else {
        @return rgba(var(--#{$prefix}#{$identifier}-rgb), var(--#{$prefix}#{$target}-opacity));
    }
}

@function var-css($identifier) {
    @return var(--#{$prefix}#{$identifier});
}

@function map-loop($map, $func, $args...) {
    $_map: ();

    @each $key, $value in $map {
        // allow to pass the $key and $value of the map as an function argument
        $_args: ();
        @each $arg in $args {
            $_args: append($_args, if($arg == "$key", $key, if($arg == "$value", $value, $arg)));
        }

        $_map: map-merge(
            $_map,
            (
                $key: call(get-function($func), $_args...)
            )
        );
    }

    @return $_map;
}

@function map-loop-spacers($start: $min, $end: $min, $spacers: false, $key: "") {
    $_map: ();
    @if ($spacers) {
        @for $i from $start through $end {
            @if ($i <= $min) {
                $_map: map.set($_map, #{$i}#{$key}, $min);
            } @else {
                $_map: map.set($_map, #{$i}#{$key}, $i * $spacers);
            }
        }
    }
    @return $_map;
}

@function get-map-sizing($max: $min) {
    $_map: ();
    $level-sizing: (
        10: 5,
        100: 25,
        500: 50
    );

    $value: 1;

    $step: 1;

    @while ($value <= $max) {
        $_map: map.set($_map, #{$value}px, ($value) * 1px);
        @if (map-has-key($level-sizing, $value)) {
            $new-step: map-get($level-sizing, $value);
            $step: $new-step;
            $value: $value + $new-step;
        } @else {
            $value: $value + $step;
        }
    }

    @return $_map;
}

// It prefixes the keys with `n` and makes the value negative.
@function fs-form($max, $forms, $min: 2, $rem: 1.325rem, $vw: 0.9vw) {
    $_map: ();

    $step-rem: $rem;

    $step-vw: $vw;

    $spacer-rem: 0.025;

    $spacer-vw: 0.3;

    @for $i from $min through $max {
        @each $value in $forms {
            $_map: map.set($_map, #{$i}#{$value}, calc(#{$step-rem} + #{$step-vw}));

            $step-rem: $step-rem + $spacer-rem;
            $step-vw: $step-vw + $spacer-vw;
        }
    }
    @return $_map;
}

@function min-fs-form($max, $forms, $min: 2, $spacer-fs: 0.25rem) {
    $_map: ();

    $step-value: $min - $spacer-fs;

    @for $i from $min through $max {
        @each $value in $forms {
            $step-value: $step-value + $spacer-fs;
            $_map: map.set($_map, #{$i}#{$value}, $step-value);
        }
    }
    @return $_map;
}

// It prefixes the keys with `n` and makes the value negative.
@function negativify-map($map) {
    $result: ();
    @each $key, $value in $map {
        @if $value != 0 {
            $result: map-merge($result, ("n" + $key: (-$value)));
        }
    }
    @return $result;
}

@function divide($dividend, $divisor, $precision: 10) {
    $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
    $dividend: math.abs($dividend);
    $divisor: math.abs($divisor);
    @if $dividend == 0 {
        @return 0;
    }
    @if $divisor == 0 {
        @error "Cannot divide by 0";
    }

    $result: percentage-col($dividend, $divisor, $sign);

    $dividend-unit: math.unit($dividend);
    $divisor-unit: math.unit($divisor);

    $unit-map: (
        "px": 1px,
        "rem": 1rem,
        "em": 1em,
        "%": 1%
    );

    @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
        $result: $result * map-get($unit-map, $dividend-unit);
    }
    @return $result;
}

@function percentage-col($dividend, $divisor, $sign, $precision: 10) {
    $remainder: $dividend;
    $result: 0;
    $factor: 10;
    @while ($remainder > 0 and $precision >= 0) {
        $quotient: 0;
        @while ($remainder >= $divisor) {
            $remainder: $remainder - $divisor;
            $quotient: $quotient + 1;
        }
        $result: $result * 10 + $quotient;
        $factor: $factor * 0.1;
        $remainder: $remainder * 10;
        $precision: $precision - 1;
        @if ($precision < 0 and $remainder >= $divisor * 5) {
            $result: $result + 1;
        }
    }
    @return $result * $factor * $sign;
}

@function list-symbol($min, $max, $symbol-2by3: 30) {
    $_map: ();

    $px: 1px;

    @while $max >= $min {
        $spacer: get-spacer($min, $max);

        $spacer-2by3: (
            5: 7.5,
            10: 15,
            15: 22.5,
            25: 37.5
        );

        $_map: map.set(
            $_map,
            $min * $px,
            (
                "w": $min * $px,
                "h": $min * $px,
                "w-2by3": $symbol-2by3 * $px
            )
        );

        $min: $min + $spacer;

        $symbol-2by3: add($symbol-2by3, map.get($spacer-2by3, $spacer));
    }

    @return $_map;
}

@function get-spacer($min, $max) {
    @if ($min < 75) {
        @return 5;
    } @else if($min< 90 or $min == 160) {
        @return 15;
    } @else if($min< 100 or $min == 150) {
        @return 10;
    } @else if($min< 150 or $min == 175) {
        @return 25;
    } @else {
        @return 25;
    }
}
